{"version":3,"sources":["components/Editor.js","components/Previewer.js","App.js","serviceWorker.js","index.js"],"names":["Editor","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","textarea","React","createRef","handleChange","bind","assertThisInitialized","e","markdownCode","target","value","current","defaultValue","focus","react_default","a","createElement","id","ref","onChange","Component","Previewer","dangerouslySetInnerHTML","__html","marked","htmlCode","sanitize","App","state","getMarkdownCode","code","setState","className","components_Editor","components_Previewer","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oQAgGeA,qBA7Fb,SAAAA,EAAYC,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IAChBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,SAAWC,IAAMC,YACtBT,EAAKU,aAAeV,EAAKU,aAAaC,KAAlBV,OAAAW,EAAA,EAAAX,QAAAW,EAAA,EAAAX,CAAAD,KAHJA,4EAKLa,GACXV,KAAKJ,MAAMe,aAAaD,EAAEE,OAAOC,mDAGjCb,KAAKJ,MAAMe,aAAaX,KAAKI,SAASU,QAAQC,cAC9Cf,KAAKI,SAASU,QAAQE,yCAsEtB,OACEC,EAAAC,EAAAC,cAAA,QAAMC,GAAG,UACPH,EAAAC,EAAAC,cAAA,YACEE,IAAOrB,KAAKI,SACZkB,SAAUtB,KAAKO,aACfQ,aAxEc,qrEAdHQ,+BCeNC,MAdf,SAAmB5B,GAQjB,OACEqB,EAAAC,EAAAC,cAAA,OAAKC,GAAG,YAAYK,wBAHb,CAACC,OADWC,IAAO/B,EAAMgC,SAAU,CAACC,UAAW,QCqB3CC,cAtBb,SAAAA,EAAYlC,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA8B,IAChBjC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAgC,GAAA3B,KAAAH,KAAMJ,KACDmC,MAAQ,CACXpB,aAAe,IAEjBd,EAAKmC,gBAAkBnC,EAAKmC,gBAAgBxB,KAArBV,OAAAW,EAAA,EAAAX,QAAAW,EAAA,EAAAX,CAAAD,KALPA,+EAOFoC,GACdjC,KAAKkC,SAAS,CACZvB,aAAesB,qCAIjB,OACEhB,EAAAC,EAAAC,cAAA,OAAKgB,UAAU,OACblB,EAAAC,EAAAC,cAACiB,EAAD,CAAQzB,aAAcX,KAAKgC,kBAC3Bf,EAAAC,EAAAC,cAACkB,EAAD,CAAWT,SAAU5B,KAAK+B,MAAMpB,uBAjBtBY,aCMEe,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO3B,EAAAC,EAAAC,cAAC0B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.b60fc2d8.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass Editor extends Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.textarea = React.createRef();\r\n    this.handleChange = this.handleChange.bind(this)\r\n  }\r\n  handleChange(e){\r\n    this.props.markdownCode(e.target.value)\r\n  }\r\n  componentDidMount(){\r\n    this.props.markdownCode(this.textarea.current.defaultValue);\r\n    this.textarea.current.focus();\r\n  }\r\n  render() {\r\n    const defaultContent = `# FreeCodeCamp Markdown Previewer\r\n    \\n_this a default content but you can change it_\r\n    \\n## Welcome to my second project for FreeCodeCamp\r\n    \\nThis a project for the Front-End libraries certificate at [FreeCodeCamp](https://www.freecodecamp.com) curriculum.\r\n    \\n### Examples of markdown syntax:\r\n    \\nYou can use this as a reference to markdown syntax\r\n    \\n# heading1\r\n    \\n## heading2\r\n    \\n### heading3\r\n    \\n#### heading4\r\n    \\n##### heading5\r\n    \\n###### heading6\r\n    \\n\r\n    \\n#### plain paragraph :\r\n    \\nThis a plain paragraph.This a plain paragraph.This a plain paragraph.This a plain paragraph.\r\n    \\n\r\n    \\n#### Text Styles :\r\n    \\nWe can create text-styles like :\r\n    \\n*Italic Text* using asterisks \\* Italic Text \\* or _Italic Text too_ using underscores \\_ Italic Text \\_\r\n    \\n**Bold Text** using double asterisks \\*\\* Bold Text \\*\\* or __Bold Text too__ using double underscores \\_\\_ Bold Text \\_\\_\r\n    \\n~~Deleted Text~~ using hyphens \\~\\~ Deleted Text \\~\\~\r\n    \\n\r\n    \\n#### Links :\r\n    \\nThis is a [link](#)\r\n    \\n\r\n    \\n#### Images :\r\n    \\n![FreeCodeCamp](https://s3.amazonaws.com/freecodecamp/curriculum-diagram-full.jpg)\r\n    \\n\r\n    \\n#### Lists :\r\n    \\nHere are some lists :\r\n    \\n* ul-list\r\n    * ul-list-item\r\n    * ul-list-item\r\n    \\n* ol-list\r\n    1. ol-list-item\r\n    2. ol-list-item\r\n    3. ol-list-item\r\n    \\n* list-with-nested-items\r\n\r\n    - list item\r\n    - list parent\r\n        1. list-child\r\n        2. list-child\r\n          * list-child-second\r\n          * list-child-second\r\n    - list parent two\r\n        1. list-child\r\n        2. list-child\r\n    \\n\r\n    \\n#### Blockquotes : \r\n    \\n> blockquote of a wise person\r\n    \\n\r\n    \\n#### Code blocks :\r\n    \\nWe can write code blocks too:\r\n    \\n\\`\\`\\`javascript\r\n    \\n  // multi-line code block\r\n    \\n  const functionName = (args) => {\r\n        return args.split('')\r\n    \\n  }\r\n    \\n\\`\\`\\`\r\n    \\n\r\n    \\n#### Tables :\r\n    \\n|header|header|header|header|\\n|--|--|--|--|\\n|body|body|body|body|\\n|body|body|body|body|\\n|body|body|body|body|\\n|body|body|body|body|\r\n    \\n\\n#### Horizontal Lines :\r\n    \\nWe can create Horizontal lines (( hr )) elements using \\\\-\\\\-\\\\- or \\\\*\\\\*\\\\* or \\n\\\\_\\\\_\\\\_\r\n    \\n___\r\n    `\r\n    return (\r\n      <form id='editor'>\r\n        <textarea\r\n          ref = {this.textarea}\r\n          onChange={this.handleChange}\r\n          defaultValue={defaultContent}\r\n        >\r\n        </textarea>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Editor;","import React from 'react';\r\nimport marked from 'marked';\r\n\r\nfunction Previewer(props) {\r\n\r\n  //https://medium.com/@arpith/handling-markdown-in-react-24b275cddf39\r\n  //Convert Markdown to html code function\r\n  const convertMarkdown = () => {\r\n    let returnedCode = marked(props.htmlCode, {sanitize : true});\r\n    return {__html : returnedCode}\r\n  }\r\n  return (\r\n    <div id='previewer' dangerouslySetInnerHTML={convertMarkdown()} >\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Previewer;\r\n","import React, { Component } from 'react';\r\nimport './App.css';\r\n\r\nimport Editor from './components/Editor';\r\nimport Previewer from './components/Previewer';\r\n\r\nclass App extends Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      markdownCode : ''\r\n    }\r\n    this.getMarkdownCode = this.getMarkdownCode.bind(this)\r\n  }\r\n  getMarkdownCode(code){\r\n    this.setState({\r\n      markdownCode : code\r\n    })\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <Editor markdownCode={this.getMarkdownCode}/>\r\n        <Previewer htmlCode={this.state.markdownCode}/>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}